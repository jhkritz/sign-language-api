image: jjanzic/docker-python3-opencv

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/python_cache"

cache:
  key: cache_key
  paths:
    ['$CI_PROJECT_DIR/python_cache']

stages:
  - test
  - deploy

run_tests:
  stage : test
  tags:
    - shared-docker-runner
  script:
    - python3 --version
    - ls -a $CI_PROJECT_DIR
    - apt-get update && apt-get install libgl1 -y
    - pip install -r backend/requirements.txt
    - cd backend; gunicorn app:app --bind=127.0.0.1:5000 & cd ../; sleep 5; python3 backend/tests.py

deploy_staging:
  stage: deploy
  tags:
    - shared-docker-runner
  script:
    #- apt-get update -yq
    #- apt-get install -y ruby ruby-dev rubygems-integration
    #- gem install dpl
    #- dpl --provider=heroku --app=$HEROKU_APP_NAME --api-key=$HEROKU_API_KEY
    #- echo "Deployed to Staging Server https://flask-api-staging.herokuapp.com"
    - git remote add heroku_backend https://heroku:$HEROKU_API_KEY@git.heroku.com/guarded-hamlet-40611.git
    - git remote add heroku_frontend https://heroku:$HEROKU_API_KEY@git.heroku.com/rocky-taiga-14209.git
    - git subtree push --prefix backend heroku_backend main
    - git subtree push --prefix frontend heroku_frontend main
  environment:
    name: staging
    url: https://flask-api-staging.herokuapp.com/


deploy_production:
  stage: deploy
  tags:
    - shared-docker-runner
  script:
    - git remote add heroku https://heroku:$HEROKU_API_KEY@git.heroku.com/flask-api-prod.git
    - git push heroku master
    - echo "Deployed to Production Server https://flask-api-prod.herokuapp.com"
  environment:
    name: production
    url: https://flask-api-prod.herokuapp.com/
  when: manual
